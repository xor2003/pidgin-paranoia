Author: Pascal Sachs

To build the keygen file use: ./build.sh

If you want to use the fast mode for key generation, you have to compile with the FAST flag. To do this, compile the program with the following command:
gcc -Wall -DFAST -o keygen keygen.c `pkg-config --cflags glib-2.0 gthread-2.0 gobject-2.0 --libs glib-2.0 gthread-2.0 gobject-2.0`

At the moment the entropie is collected by the devices /dev/audio and /dev/random and furthermore from thread timing. Planned are also to collect entropie from mouse and keyboard events and eventually from system state.

Eventhough I try the best, I as author don't guarantee, that the collected entropie is good enough to outstand any attacks against information encrypted with keys generated by this key-generator.

At the moment I provide the following tools:
1.) keygen:
	to compile it, use: ./build.sh
	the length of the generated key has to be changed in the source code. just change the value of the variable "n" to the number of bytes of entropie you wish to collect.

2.) invert:
	to compile it: gcc -Wall -o invert invert.c
	useage: ./invert keyfile
	this tool inverts the keyfile bytewise, so you can use it with the one time pad.

3.) check_entropy:
	to compile it: gcc -Wall -o check_entropy check_entropy.c
	useage: ./check_entropy keyfile
	this tool checks the entropy of a given keyfile and outputs some statistic information. You can use this tool to check how secure the generated keyfile is. Secure is, if the values have e equally distribution and the longest race is less then 32 (approximately)

If you have any wishes or critics feel free to send me an e-mail to: psachs@student.ethz.ch
