--------------------------------------------------------------------------------
                  Pidgin Paranoia Plugin Change Log
--------------------------------------------------------------------------------

Version 0.3.0
--------------------------------------------------------------------------------
Simon Wenner:
 * Paranoia: modular key management (first step)
 * Paranoia: key list uses move-to-front transform
 * Paranoia: A pop-up at the end and status messages while generating new keys
 * Paranoia: '/otp reload' command added to regenerate the key list
 * Pranopia: key generator live status feedback
 * Paranoia: enhanced session management: ACK message is sent on request
  - Compatible with 0.2 by accident :-)

Christian Wäckerlin:
 * libotp: Added CRC32 test to ensure that the messages are unmodified
  - This breaks compatibility with versions smaller than 0.2
  - Compatible with version 0.2, libotp aknowledges that 0.2 has no CRC32 and 
    does not complain that the message has changed
 * Code cleanup and minor bug fixes

Pascal Sachs:
 * Keygen: Changed I/O System from glibc to GIO
 * Keygen: Better performance and less CPU usage on key generation
 * Keygen: Security Improvement through new entropy pool system
 * Keygen: Entropy source check moved from libotp to keygen
 * Keygen: Added ability to generate multiple keys simultaneous
 * Keygen: Code cleanup and minor bug fixes

Version 0.2.0
--------------------------------------------------------------------------------
Simon Wenner:
 * Check libpurple and glib minor version number in configure
 * Cleaned and enhanced the make system
 * Paranoia: Support for multiple key files per conversation
 * Paranoia: Use the new libotp api (set/get and config)
 * Paranoia: Key settings are resetted if a buddy goes offline
 * Paranoia: '/otp list' and '/otp list-all' added to list available keys
 * Paranoia: no more request messages for offline buddies
 * Paranoia: add generated key to the key list

Christian Wäckerlin:
 * Libotp: System of error syndromes (OtpError) implemented
 * Libotp: otp_encrypt, otp_decrypt, otp_encrypt_warning are now transactional
 * Libotp: getter/setter system, struct otp is now private
 * Libotp: otp_conf system implemented, libotp is multi-application aware
 * Libotp keeps filehandles and mmap open to save CPU cycles.
 * Libotp locks the keyfiles that are in use.
 * Libotp: A tailing minimal padding is added to the messages on encryption 
   (and also random length padding) (allows future feature without breakage 
   of the spec.)
 * Debian/Ubuntu package support added
 * New otptester added

Pascal Sachs:
 * Libotp: Create and integrate the threaded key-generator
 * Libotp: Support for loop key creation
 * Libotp: Add a signal for the key generation status


Version 0.1.0
--------------------------------------------------------------------------------
Simon Wenner:
 * Paranoia: Basic plugin structure, libotp API
 * A build system 'from hell'! (but it seems to work)
 * Session and key management documentation
 * Paranoia: CLI functionality
 * Paranoia: Key list search functions
 * Paranoia: Key list is generated from files and can be freed
 * Paranoia: Basic session initialisation
 * Paranoia: Basic session closing
 * Paranoia: Encryptet messages are labelled
 * Paranoia: Working commands: /otp help, info, on, off, genkey
 * Paranoia: Change fake <otp> strings
 * Paranoia: Session closing on plugin unload

Christan Wäckerlin:
 * One-time pad documentation
 * Libotp: xor function
 * Libotp: base64 encode and decode using gnomelib
 * Libotp: encrypt and decrypt
 * Libotp: struct *mypad is generated from keyfile
 * Libotp: Keyfile templates added
 * Libotp: Full keyfile support
 * Added support for the ./configure --disable-otp swich that disables libotp
   support for development.
 * Added support for protected entropy signaling (i.e. no entropy  signal)
 * Added support for keyfile creation
 * Added support for the destruction of keyfiles (using up all entropy)
 * Added support for key check using repeatprobability.
 * Added support for addition of a random tail onto the encrypted message 
   to prevent 'eve' from knowing the exact length of the message

